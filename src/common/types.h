#pragma once

// stdlib
#include <stdint.h>
// C++
#include <map>
#include <string>
#include <vector>
// proj
#include "../hashtable/hashtable.h"

const size_t k_max_msg = 32 << 20;

typedef std::vector<uint8_t> Buffer;

// Response::status
enum {
    RES_OK = 0,
    RES_ERR = 1,
    RES_NX = 2,
};

// define the Response type
struct Response {
    uint32_t status = 0;
    std::vector<uint8_t> data;
};

// Per-connection state
struct Conn {
    int fd = -1;
    // Application's intention, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // Buffered input and output
    std::vector<uint8_t> incoming;  // data to be parsed by the application
    std::vector<uint8_t> outgoing;  // responses generated by the application
};

// Step 1 Define data types
static struct {
    HashMap db;  // top-level hashtable
} g_data;

// KV pair for the top-level hashtable
struct Entry {
    struct HashNode node;
    std::string key;
    std::string val;
};

// error code for TAG_ERR
enum {
    ERR_UNKNOWN = 1,
    ERR_TOO_BIG = 2,
};

// simple serialization format
enum {
    TAG_NIL = 0,  // nil
    TAG_ERR = 1,  // error  coe + msg
    TAG_STR = 2,  // string
    TAG_INT = 3,  // int64
    TAG_DBL = 4,  // double
    TAG_ARR = 5,  // array
};
