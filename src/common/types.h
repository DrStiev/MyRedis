#pragma once

// stdlib
#include <stdint.h>
// C++
#include <map>
#include <string>
#include <vector>
// proj
#include "../hashtable/hashtable.h"
#include "../list/dl_list.h"
#include "../sorted_set/zset.h"
#include "../tree/heap.h"

const size_t k_max_msg = 32 << 20;
const size_t k_max_args = 200 * 1000;
static const ZSet k_empty_zset;
const size_t k_max_works = 2000;

typedef std::vector<uint8_t> Buffer;

// Response::status
enum {
    RES_OK = 0,
    RES_ERR = 1,
    RES_NX = 2,
};

// define the Response type
struct Response {
    uint32_t status = 0;
    std::vector<uint8_t> data;
};

// Per-connection state
struct Conn {
    int fd = -1;
    // Application's intention, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // Buffered input and output
    std::vector<uint8_t> incoming;  // data to be parsed by the application
    std::vector<uint8_t> outgoing;  // responses generated by the application
    // timer
    uint64_t last_active_ms = 0;
    DL_List idle_node;
};

// Step 1 Define data types
static struct {
    HashMap db;  // top-level hashtable
    // a map of all client connections, keyed by fd
    std::vector<Conn *> fd2conn;
    // timers for idle connections
    DL_List idle_list;  // list head
    // timer for TTLs
    std::vector<HeapItem> heap;
} g_data;

enum {
    T_INIT = 0,
    T_STR = 1,   // string
    T_ZSET = 2,  // sorted set
};

// KV pair for the top-level hashtable
struct Entry {
    struct HashNode node;  // hashtable node
    std::string key;
    // for TTL
    size_t heap_idx = -1;  // array index to the heap item
    // value
    uint32_t type = 0;
    // one of the following
    std::string str;
    ZSet zset;
};

// error code for TAG_ERR
enum {
    ERR_UNKNOWN = 1,  // unknown command
    ERR_TOO_BIG = 2,  // response too big
    ERR_BAD_TYP = 3,  // unexpected value type
    ERR_BAD_ARG = 4,  // bad  arguments
};

// simple serialization format
enum {
    TAG_NIL = 0,  // nil
    TAG_ERR = 1,  // error  coe + msg
    TAG_STR = 2,  // string
    TAG_INT = 3,  // int64
    TAG_DBL = 4,  // double
    TAG_ARR = 5,  // array
};

struct LookupKey {
    struct HashNode node;  // hashtable node
    std::string key;
};
