#ifndef TYPES_H
#define TYPES_H

// stdlib
#include <stdint.h>
// C++
#include <vector>
#include <string>
#include <map>
// proj
#include "hashtable.h"

const size_t k_max_msg = 32 << 20; 

// Response::status
enum {
    RES_OK = 0,
    RES_ERR = 1,
    RES_NX = 2,
};

// define the Response type
struct Response {
    uint32_t status = 0;
    std::vector<uint8_t> data;
};

// Per-connection state
struct Conn {
    int fd = -1;
    // Application's intention, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // Buffered input and output
    std::vector<uint8_t> incoming; // data to be parsed by the application
    std::vector<uint8_t> outgoing; // responses generated by the application
};

// Step 1 Define data types
static struct {
    HashMap db; // top-level hashtable
} g_data;

// KV pair for the top-level hashtable
struct Entry {
    struct HashNode node;
    std::string key;
    std::string val;
};

// static std::map<std::string, std::string> g_data;

#endif